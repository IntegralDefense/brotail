#!/usr/bin/env python3
# vim: ts=4:sw=4:et

import argparse
from configparser import ConfigParser
import datetime
import json
import sys

from bson.objectid import ObjectId
from pymongo import MongoClient

class _JSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime.datetime):
            return obj.isoformat()
        elif isinstance(obj, ObjectId):
            return str(obj)
        else:
            return super(_JSONEncoder, self).default(obj)

#
# export the crits database into a json file to be consumed by brotail


parser = argparse.ArgumentParser(description="Brotail - Crits Export - export the crits database into a json file to be consumed by brotail")
parser.add_argument('-c', '--config', dest='config_path', default='etc/crits_export.ini',
    help="Specify an alternate configuration file.  Defaults to etc/crits_export.ini")
args = parser.parse_args()

# load configuration
config = ConfigParser()
try:
    config.read(args.config_path)
except Exception as e:
    sys.stderr.write("unable to load configuration file: {0}".format(str(e)))
    sys.exit(1)

result = {}

connection = MongoClient('mongodb://{0}:{1}'.format(config['crits']['host'], config['crits']['port']))
db = connection[config['crits']['db']]
indicator_types = db.object_types.find({"active": "on"})

for row in indicator_types:
    indicator_type = row['type']
    result[indicator_type] = []

    collection = db.indicators.find({"status": "Analyzed", "type": indicator_type})
    for item in collection:
        # all we need is the _id and value
        result[indicator_type].append({ '_id': item['_id'], 'type': item['type'], 'value': item['value'] })

# export this to json
with open(config['crits']['export_path'], 'w') as fp:
    json.dump(result, fp, sort_keys=True, cls=_JSONEncoder)
